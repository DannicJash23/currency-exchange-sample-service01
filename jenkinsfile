pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '343369923539'
        AWS_REGION = 'ap-south-1'
        IMAGE_NAME = 'currency-exchange-sample-service01'
        ECR_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    }
    options {
        timestamps()
        skipDefaultCheckout()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & Test') {
            parallel {
                stage('Build') {
                    steps {
                        sh 'mvn clean install'
                    }
                }
                stage('Unit Test') {
                    steps {
                        sh 'mvn test'
                    }
                }
                stage('Code Quality Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }
        stage('Coverage Check') {
            steps {
                script {
                    def coverage = readFile('target/site/jacoco/index.html').contains('80%')
                    if (!coverage) {
                        error "Coverage less than 80%!"
                    }
                }
            }
        }
        stage('Containerize') {
            steps {
                sh """
                docker build -t ${IMAGE_NAME}:latest .
                docker tag ${IMAGE_NAME}:latest ${ECR_URI}/${IMAGE_NAME}:latest
                """
            }
        }
        stage('Vulnerability Scan') {
            steps {
                sh """
                trivy image --severity HIGH,CRITICAL ${ECR_URI}/${IMAGE_NAME}:latest
                """
            }
        }
        stage('Push to ECR') {
            steps {
                sh """
                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                docker push ${ECR_URI}/${IMAGE_NAME}:latest
                """
            }
        }
        stage('Deploy to EKS') {
            when {
                branch 'dev'
            }
            steps {
                sh "kubectl apply -f k8s/dev/deployment.yaml"
            }
        }
        stage('Approval for Prod') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Approve Deployment to Prod?'
                sh "kubectl apply -f k8s/prod/deployment.yaml"
            }
        }
    }
    post {
        failure {
            emailext subject: "Pipeline Failed: ${env.JOB_NAME}",
                     body: "Job ${env.JOB_NAME} failed. Please investigate.",
                     to: 'shekharnaik071@gmail.com'
        }
        success {
            emailext subject: "Pipeline Succeeded: ${env.JOB_NAME}",
                     body: "Job ${env.JOB_NAME} completed successfully.",
                     to: 'shekharnaik071@gmail.com'
        }
    }
}
